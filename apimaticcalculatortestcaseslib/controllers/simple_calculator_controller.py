# -*- coding: utf-8 -*-

"""
    apimaticcalculatortestcaseslib.controllers.simple_calculator_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 01/05/2017
"""

from .base_controller import *

class SimpleCalculatorController(BaseController):

    """A Controller to access Endpoints in the apimaticcalculatortestcaseslib API."""
    

    def get_calculate(self,
                      options=dict()):
        """Does a GET request to /{operation}.

        Calculates the expression using the specified operation.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    operation -- string -- The operator to apply on the
                        variables
                    x -- float -- The LHS value
                    y -- float -- The RHS value

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/{operation}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'operation': options.get('operation', None)
        })
        _query_url = APIHelper.clean_url(_query_builder)
        _query_parameters = {
            'x': options.get('x', None),
            'y': options.get('y', None)
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, query_parameters=_query_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 404:
            return None
        self.validate_response(_context)    

        # Return appropriate type
        return _context.response.raw_body
